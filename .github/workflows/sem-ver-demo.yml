name: GitHub Actions Demo
run-name: ${{ github.actor }} is testing out GitHub Actions üöÄ
on: [push]
jobs:
  Explore-GitHub-Actions:
    runs-on: ubuntu-latest
    steps:
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "üñ•Ô∏è The workflow is now ready to test your code on the runner."
      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}
      - run: echo "üçè This job's status is ${{ job.status }}."
      
      - uses: paulhatch/semantic-version@v5.0.2
        id: tag_version_develop
        with:
          # The prefix to use to identify tags
          tag_prefix: "v"
          # A string which, if present in a git commit, indicates that a change represents a
          # major (breaking) change, supports regular expressions wrapped with '/'
          major_pattern: "(MAJOR)"
          # A string which indicates the flags used by the `major_pattern` regular expression. Supported flags: idgs
          major_regexp_flags: ""
          # Same as above except indicating a minor change, supports regular expressions wrapped with '/'
          minor_pattern: "(MINOR)"
          # A string which indicates the flags used by the `minor_pattern` regular expression. Supported flags: idgs
          minor_regexp_flags: ""
          # A string to determine the format of the version output
          version_format: "${major}.${minor}.${patch}-prerelease${increment}"
          # Optional path to check for changes. If any changes are detected in the path the
          # 'changed' output will true. Enter multiple paths separated by spaces.
          change_path: "src/my-service"
          # Named version, will be used as suffix for name version tag
          namespace: my-service
          # If this is set to true, *every* commit will be treated as a new version.
          bump_each_commit: false
          # If true, the body of commits will also be searched for major/minor patterns to determine the version type.
          search_commit_body: false
          # The output method used to generate list of users, 'csv' or 'json'.
          ############# user_format_type: "csv"
          # Prevents pre-v1.0.0 version from automatically incrementing the major version.
          # If enabled, when the major version is 0, major releases will be treated as minor and minor as patch. Note that the version_type output is unchanged.
          #### enable_prerelease_mode: true

          format: "${major}.${minor}.${patch}"
          
      - name: Print Tag Release (vX.Y.Z)
        run: |
          echo steps.tag_version_develop.outputs.version_tag
          echo ${{ steps.tag_version_develop.outputs.version_tag }}
          
      # - name: Bump version and push tag
        # id: tag_version
        # uses: mathieudutour/github-tag-action@v6.1
        # with:
          # github_token: ${{ secrets.GITHUB_TOKEN }}
          
      # - name: Create a GitHub release
        # uses: ncipollo/release-action@v1
        # with:
          # tag: ${{ steps.tag_version_develop.outputs.version_tag }}
          # name: Release ${{ steps.tag_version.outputs.new_tag }}
          # # body: ${{ steps.tag_version.outputs.changelog }}

      #- name: Tag Release (vX.Y.Z)
       # run: |
       #   git tag ${{ steps.tag_version_develop.outputs.version_tag }}
       #   git push origin ${{ steps.tag_version_develop.outputs.version_tag }}